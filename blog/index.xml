<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Ty Scales</title>
    <link>https://tscales.github.io/blog/</link>
    <description>Recent content in Blog on Ty Scales</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Nov 2023 20:32:41 -0800</lastBuildDate><atom:link href="https://tscales.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bitwise Addition</title>
      <link>https://tscales.github.io/blog/bitwise-addition/</link>
      <pubDate>Tue, 21 Nov 2023 20:32:41 -0800</pubDate>
      
      <guid>https://tscales.github.io/blog/bitwise-addition/</guid>
      <description>Here is a function that can add two numbers using bitwise operators.
func bitwise_add(a, b int) int {  if b == 0 {  return a  }  return bitwise_add(a^b, (a&amp;amp;b) &amp;lt;&amp;lt; 1) } Why does this work? It&amp;rsquo;s helpful to look at this function not as performing &amp;ldquo;addition&amp;rdquo;, but in using the bitwise operators to rewrite a mathematical expression.
Let&amp;rsquo;s show this concretely with two numbers.
Let a = 5 as the expression $2^2 + 2^0$</description>
    </item>
    
    <item>
      <title>Writing a Mock Library in Go</title>
      <link>https://tscales.github.io/blog/writing-a-mock-library/</link>
      <pubDate>Tue, 29 Aug 2023 13:34:16 -0700</pubDate>
      
      <guid>https://tscales.github.io/blog/writing-a-mock-library/</guid>
      <description>This post will walk through the core components that make the mock package from Testify work. It consists of 3 parts:
 a mock object that keeps track of expected calls a call object that keeps track of expected arguments and return values an algorithm to fetch the return values when called.  Mock is a struct with an Array of Calls and a mutual exclusion lock to ensure only one goroutine accesses the resource at a time.</description>
    </item>
    
    <item>
      <title>A Practical Use Case for Higher Order Functions</title>
      <link>https://tscales.github.io/blog/higher-order-functions/</link>
      <pubDate>Sun, 13 Mar 2022 11:02:32 -0700</pubDate>
      
      <guid>https://tscales.github.io/blog/higher-order-functions/</guid>
      <description>Have you ever encountered this scenario before?
Lets say you have a class User.
case class User(firstName: String, lastName: String, address: String) You&amp;rsquo;re using this class in production to store information retrieved from an endpoint. Now imagine you are given a new task where you need to fetch a User from a new endpoint. However, This endpoint does not contain the address field, you&amp;rsquo;ll have to get that field from a second new endpoint.</description>
    </item>
    
  </channel>
</rss>
